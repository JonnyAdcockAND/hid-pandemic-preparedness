---
import { getCollection } from "astro:content";
import _ from "lodash";

import BaseLayout from "@layouts/BaseLayout.astro";

// Interfaces
import type { ExplainerProps } from "@components/QuestionBank/Explainer/Explainer.interface";
import type { FilterableQuestionsProps } from "@components/QuestionBank/FilterableQuestions/FilterableQuestions.interface";
import type { QuestionBlockProps } from "@components/QuestionBank/QuestionBlock/QuestionBlock.interface";
import type { TagData } from "@localTypes/TagData";

// Components
import { Explainer } from "@components/QuestionBank/Explainer/Explainer";
import { Header } from "@components/Core/Header/Header";
import { FilterableQuestions } from "@components/QuestionBank/FilterableQuestions/FilterableQuestions";
import { References } from "@components/References/References";

// Helpers
import { createQuestionBlock } from "@helpers/createQuestionBlock";

// Content
import headerData from "@content/tools/question-bank/header.json";
import questionBlocksData from "@content/tools/question-bank/questionBlocks.json";
import referencesData from "@content/Home/references.json";

import ageMarkdown from "@content/tools/question-bank/age.md?raw";
import ethnicityMarkdown from "@content/tools/question-bank/ethnicity.md?raw";
import frequencyAndPurposeOfTravelMarkdown from "@content/tools/question-bank/frequency-and-purpose-of-travel.md?raw";
import sexGenderMarkdown from "@content/tools/question-bank/sex-gender.md?raw";
import travelAndRegulationsMarkdown from "@content/tools/question-bank/travel-and-regulations.md?raw";

const currentRoute: string = Astro.url.pathname;

// Trim leading slash from current route so we can use to filter returned collections
const filterUrl: string = currentRoute.replace(/^\//, "");

// Get explainer markdown
const explainerCollection = await getCollection("toolsExplainer", ({ id }) => {
  return id === `${filterUrl}explainer`;
});

// Get the unique tags from the question block data to build filter
const uniqueTags = _.uniqBy(
  questionBlocksData.flatMap((item) => item.tags),
  "id",
);

const filterMenuData = {
  title: "Theme",
  checkItems: uniqueTags.map((tag) => ({ label: tag.title, id: tag.id })),
  inverse: false,
};

// Build the questions blocks using `questionBlocksData` and found content
const questionBlock1 = await createQuestionBlock(ageMarkdown);
const questionBlock2 = await createQuestionBlock(ethnicityMarkdown);
const questionBlock3 = await createQuestionBlock(
  frequencyAndPurposeOfTravelMarkdown,
);
const questionBlock4 = await createQuestionBlock(sexGenderMarkdown);
const questionBlock5 = await createQuestionBlock(travelAndRegulationsMarkdown);

// Update the tags ooh god this is awful
questionBlock1.tags = questionBlocksData[0].tags as TagData[];
questionBlock2.tags = questionBlocksData[1].tags as TagData[];
questionBlock3.tags = questionBlocksData[2].tags as TagData[];
questionBlock4.tags = questionBlocksData[3].tags as TagData[];
questionBlock5.tags = questionBlocksData[4].tags as TagData[];

const qbd: QuestionBlockProps[] = [];

// Build the questionBlocksData
qbd.push(questionBlock1);
qbd.push(questionBlock2);
qbd.push(questionBlock3);
qbd.push(questionBlock4);
qbd.push(questionBlock5);

// Build the explainerData
const explainerData: ExplainerProps = {
  htmlContent: explainerCollection[0].rendered?.html ?? "",
};

const filterableQuestionsData: FilterableQuestionsProps = {
  filterMenu: filterMenuData,
  questionBlocks: qbd as QuestionBlockProps[],
};
---

<BaseLayout title={headerData.title}>
  <main>
    <Header {...headerData} />
    <Explainer {...explainerData} />
    <FilterableQuestions {...filterableQuestionsData} client:visible />
    <References {...referencesData} client:visible />
  </main>
</BaseLayout>
